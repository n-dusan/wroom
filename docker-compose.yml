version: "3.4"
services:
  #  eureka:
  #    build:
  #      context: ./eureka-service-registry
  #      dockerfile: Dockerfile
  #    image: xws:eureka
  #    container_name: eureka
  #    ports:
  #      - 8761:8761
  #    networks:
  #      - xws-network
  #
  #  zuul:
  #    build:
  #      context: ./zuul-api-gateway
  #      dockerfile: Dockerfile
  #    image: xws:zuul
  #    container_name: zuul
  #    ports:
  #      - 8762:8762
  #    environment:
  #      REGISTRY_HOST: eureka
  #      KEYSTORE: /etc/certificates/experimental/zuul-server.p12
  #      KEYSTORE_PASSWORD: password
  #      KEYSTORE_ALIAS: 655575225830
  #      TRUSTSTORE: /etc/truststore.p12
  #      TRUSTSTORE_PASSWORD: password
  #    networks:
  #      - xws-network
  #    depends_on:
  #      - eureka
  #    links:
  #      - eureka
  #    volumes:
  #      - ./pki/tingle/certificates:/etc/certificates
  #      - ./pki/tingle/.truststore:/etc
  #
  #  auth-service:
  #    build:
  #      context: ./auth-service
  #      dockerfile: Dockerfile
  #    image: xws:auth-service
  #    container_name: auth-service
  #    restart: on-failure
  #    networks:
  #      - xws-network
  #    environment:
  #      REGISTRY_HOST: eureka
  #      DATABASE_USERNAME: root
  #      DATABASE_PASSWORD: root
  #      DATABASE_DOMAIN: mysql
  #      DATABASE_SCHEMA: wroom
  #      RMQ_HOST: rabbitmq-broker
  #      CLOUDAMQP_URL: ${CLOUDAMQP_URL}
  #    ports:
  #      - 8092:8092
  #    depends_on:
  #      - eureka
  #      - mysql
  #      - rabbitmq-broker
  #    links:
  #      - eureka
  #      - mysql
  #
  #  search-service:
  #    build:
  #      context: ./search-service
  #      dockerfile: Dockerfile
  #    image: xws:search-service
  #    container_name: search-service
  #    restart: on-failure
  #    networks:
  #      - xws-network
  #    environment:
  #      REGISTRY_HOST: eureka
  #      DATABASE_USERNAME: root
  #      DATABASE_PASSWORD: root
  #      DATABASE_DOMAIN: mysql
  #      DATABASE_SCHEMA: search
  #      RMQ_HOST: rabbitmq-broker
  #    ports:
  #      - 8091:8091
  #    depends_on:
  #      - eureka
  #      - mysql
  #      - rabbitmq-broker
  #    links:
  #      - eureka
  #
  #  vehicle-service:
  #    build:
  #      context: ./vehicle-service
  #      dockerfile: Dockerfile
  #    image: xws:vehicle-service
  #    container_name: vehicle-service
  #    restart: on-failure
  #    networks:
  #      - xws-network
  #    environment:
  #      REGISTRY_HOST: eureka
  #      DATABASE_USERNAME: root
  #      DATABASE_PASSWORD: root
  #      DATABASE_DOMAIN: mysql
  #      DATABASE_SCHEMA: wroom
  #      RMQ_HOST: rabbitmq-broker
  #    ports:
  #      - 8093:8093
  #    depends_on:
  #      - eureka
  #      - mysql
  #      - rabbitmq-broker
  #    links:
  #      - eureka
  #
  #  ads-service:
  #    build:
  #      context: ./ads-service
  #      dockerfile: Dockerfile
  #    image: xws:ads-service
  #    container_name: ads-service
  #    restart: on-failure
  #    networks:
  #      - xws-network
  #    environment:
  #      REGISTRY_HOST: eureka
  #      DATABASE_USERNAME: root
  #      DATABASE_PASSWORD: root
  #      DATABASE_DOMAIN: mysql
  #      DATABASE_SCHEMA: wroom
  #      RMQ_HOST: rabbitmq-broker
  #    ports:
  #      - 8094:8094
  #    depends_on:
  #      - eureka
  #      - mysql
  #      - rabbitmq-broker
  #    links:
  #      - eureka
  #
  #  renting-service:
  #    build:
  #      context: ./renting-service
  #      dockerfile: Dockerfile
  #    image: xws:renting-service
  #    container_name: renting-service
  #    restart: on-failure
  #    networks:
  #      - xws-network
  #    environment:
  #      REGISTRY_HOST: eureka
  #      DATABASE_USERNAME: root
  #      DATABASE_PASSWORD: root
  #      DATABASE_DOMAIN: mysql
  #      DATABASE_SCHEMA: wroom
  #      RMQ_HOST: rabbitmq-broker
  #    ports:
  #      - 8095:8095
  #    depends_on:
  #      - eureka
  #      - mysql
  #    links:
  #      - eureka

  rabbitmq-broker:
    image: rabbitmq:management-alpine
    container_name: rabbitmq-broker
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - xws-network

  # mysql:
  #   image: mysql:8.0.19
  #   container_name: mysql
  #   restart: always
  #   networks:
  #     - xws-network
  #   environment:
  #     MYSQL_ALLOW_EMPTY_PASSWORD: "true"
  #     MYSQL_ROOT_PASSWORD: root
  #     #      MYSQL_USER: root
  #     MYSQL_PASSWORD: root
  #   #      MYSQL_DATABASE: wroom
  #   volumes:
  #     - mysql-data:/var/lib/mysql
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   ports:
  #     - "3306:3306"

#  wroom-ui:
#    build:
#      context: ./microservice-ui
#      dockerfile: Dockerfile
#    image: xws:wroom-ui
#    container_name: wroom-ui
#    environment:
#      KEYSTORE: /etc/certificates/wroom-client/wroom-client.p12
#      KEYSTORE_PASSWORD: password
#      KEYSTORE_ALIAS: 248621907453
#      TRUSTSTORE: /etc/truststore.p12
#      TRUSTSTORE_PASSWORD: password
#    ports:
#      - 4201:4201
#    volumes:
#      - ./pki/tingle/certificates:/etc/certificates
#      - ./pki/tingle/.truststore:/etc

#  agent:
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    image: xws:agent
#    container_name: agent
#    restart: on-failure
#    networks:
#      - xws-network
#    ports:
#      - 8081:8081
#    environment:
#      DATABASE_USERNAME: root
#      DATABASE_PASSWORD: root
#      DATABASE_DOMAIN: mysql
#      DATABASE_SCHEMA: agent
#      CLOUDAMQP_URL: ${CLOUDAMQP_URL}
#    depends_on:
#      - mysql

  flask-gps:
    build:
      context: ./gps-service
      dockerfile: Dockerfile
      network: host
    image: xws:gps
    container_name: flask-gps
    networks:
      - xws-network
    ports:
      - 5000:5000
    environment:
      RMQ_HOST: rabbitmq-broker
    volumes:
      - ./gps-service:/app
    depends_on:
      - rabbitmq-broker

volumes:
  mysql-data:

networks:
  xws-network:
    driver: bridge
